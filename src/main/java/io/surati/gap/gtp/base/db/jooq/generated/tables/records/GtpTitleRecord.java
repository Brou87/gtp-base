/*
 * This file is generated by jOOQ.
 */
package io.surati.gap.gtp.base.db.jooq.generated.tables.records;


import io.surati.gap.gtp.base.db.jooq.generated.tables.GtpTitle;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GtpTitleRecord extends UpdatableRecordImpl<GtpTitleRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.gtp_title.code</code>.
     */
    public void setCode(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.gtp_title.code</code>.
     */
    public String getCode() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.gtp_title.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.gtp_title.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.gtp_title.notes</code>.
     */
    public void setNotes(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.gtp_title.notes</code>.
     */
    public String getNotes() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return GtpTitle.GTP_TITLE.CODE;
    }

    @Override
    public Field<String> field2() {
        return GtpTitle.GTP_TITLE.NAME;
    }

    @Override
    public Field<String> field3() {
        return GtpTitle.GTP_TITLE.NOTES;
    }

    @Override
    public String component1() {
        return getCode();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getNotes();
    }

    @Override
    public String value1() {
        return getCode();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getNotes();
    }

    @Override
    public GtpTitleRecord value1(String value) {
        setCode(value);
        return this;
    }

    @Override
    public GtpTitleRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public GtpTitleRecord value3(String value) {
        setNotes(value);
        return this;
    }

    @Override
    public GtpTitleRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GtpTitleRecord
     */
    public GtpTitleRecord() {
        super(GtpTitle.GTP_TITLE);
    }

    /**
     * Create a detached, initialised GtpTitleRecord
     */
    public GtpTitleRecord(String code, String name, String notes) {
        super(GtpTitle.GTP_TITLE);

        setCode(code);
        setName(name);
        setNotes(notes);
    }
}
